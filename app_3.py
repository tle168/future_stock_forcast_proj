import streamlit as st
import pandas as pd
from model_lstm import prepare_lstm_data, train_lstm_model, forecast_lstm
from ta_signals import compute_indicators, generate_signals
from charts import plot_price_forecast, plot_heatmap
from ollama_helper import ask_ollama
from data_fetcher import fetch_stock_data, load_data
from datetime import datetime, timedelta, time
from vnstock import * # N·∫°p th∆∞ vi·ªán ƒë·ªÉ s·ª≠ d·ª•ng
from email_alert import send_email
import plotly.tools as tls
import matplotlib.pyplot as plt
from config import *
# ==========================
# Thi·∫øt l·∫≠p c·∫•u h√¨nh ng√†y th√°ng
# ==========================

def last_n_days(n):
    """
    Return a date value in YYYY-MM-DD format for last n days. If n = 0, return today's date.
    """
    date_value = (datetime.today() - timedelta(days=n)).strftime('%Y-%m-%d')
    return date_value

LAST_1Y = last_n_days(365)
LAST_30D = last_n_days(30)
LAST_WEEK = last_n_days(7)
YESTERDAY = last_n_days(1) # ng√†y h√¥m qua (kh√¥ng ph·∫£i l√† ng√†y cu·ªëi c√πng giao d·ªãch, ƒë∆°n gi·∫£n l√† ng√†y li·ªÅn tr∆∞·ªõc)
Today = datetime.today().strftime('%Y-%m-%d') # ng√†y h√¥m nay (kh√¥ng ph·∫£i l√† ng√†y cu·ªëi c√πng giao d·ªãch, ƒë∆°n gi·∫£n l√† ng√†y li·ªÅn tr∆∞·ªõc)
# =========================
# X·ª≠ l√Ω d·ªØ li·ªáu v√† LSTM
# =========================
end_date=YESTERDAY
start_date = LAST_1Y

st.set_page_config(layout="wide")
st.title("üìà AI Stock Forecast Dashboard")

# Sidebar
symbol = st.sidebar.text_input("üîç M√£ c·ªï phi·∫øu", value="FPT")
window = st.sidebar.slider("üïí S·ªë ng√†y qu√° kh·ª© (window)", 10, 60, 20)
forecast_days = st.sidebar.slider("D·ª± b√°o s·ªë ng√†y t·ªõi", 5, 30, 10)
st.sidebar.markdown("## T·∫£i d·ªØ li·ªáu")
# Load data from CSV as default
data = pd.DataFrame()


if st.sidebar.button("Fetch Data & Analyze"):
    stock = Vnstock().stock(symbol=symbol, source='VCI') # ƒê·ªãnh nghƒ©a bi·∫øn vnstock l∆∞u th√¥ng tin m√£ ch·ª©ng kho√°n & ngu·ªìn d·ªØ li·ªáu b·∫°n s·ª≠ d·ª•ng
    data = stock.quote.history(start=start_date, end=end_date, interval='1D') # Thi·∫øt l·∫≠p th·ªùi gian t·∫£i d·ªØ li·ªáu v√† khung th·ªùi gian tra c·ª©u l√† 1 ng√†y
    data.columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
    # data = pd.read_csv(f"data/{symbol}.csv")
    # #data = load_data(symbol, start_date, end_date)
    # data['Date'] = pd.to_datetime(data['Date'])
    data.set_index('Date', inplace=True)
    st.sidebar.info("Data loaded successfully!")

if len(data) > 0:
    close_series = data['Close']
    X, y, scaler = prepare_lstm_data(close_series, window)
    model = train_lstm_model(X, y)
    forecast = forecast_lstm(model, close_series, window, forecast_days, scaler)

    forecast_dates = pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=forecast_days)
    forecast_df = pd.DataFrame({"Forecast": forecast.flatten()}, index=forecast_dates)

    indicators = compute_indicators(data)
    signals = generate_signals(indicators)

    col1, col2 = st.columns([2, 1])
    with col1:
        st.subheader("Gi√° th·ª±c t·∫ø & d·ª± b√°o")
        st.plotly_chart(plot_price_forecast(data, forecast_df), use_container_width=True)
    with col2:
        st.subheader("Gi√° d·ª± b√°o")
        st.write(f"Gi√° d·ª± b√°o cho {symbol} trong {forecast_days} ng√†y t·ªõi:")

        st.table(forecast_df["Forecast"].reset_index().rename(columns={"index": "Ng√†y", "Forecast": "Gi√° d·ª± b√°o"}))

        email = st.text_input("Email: ", value="thach.le168@gmail.com")
        if st.button("G·ª≠i email"):
            send_email(forecast_df, email)
            st.info("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")

    st.subheader(f"Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng giao d·ªãch c·ªßa {symbol}")
    # st.plotly_chart(plot_heatmap(data), use_container_width=True)
    st.bar_chart(data['Volume'], use_container_width=True)

    
    if st.button("Ph√¢n t√≠ch b·∫±ng Ollama"):
        with st.spinner("Inflating balloons..."):
            time.sleep(5)
        st.info(f"ü§ñ Asking Ollama ({OLLAMA_MODEL}) for analysis...")
        st.subheader("Khuy·∫øn ngh·ªã t·ª´ AI")
        prompt = f"Ph√¢n t√≠ch k·ªπ thu·∫≠t c·ªï phi·∫øu {symbol} v·ªõi gi√° ƒë√≥ng c·ª≠a g·∫ßn ƒë√¢y: {close_series.tail(20).tolist()}"
        result = ask_ollama(prompt)
        st.info(result)

